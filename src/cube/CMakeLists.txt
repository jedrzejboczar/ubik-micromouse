### STM32CUBEMX ################################################################
# CMake wrapper of sources generated by STMCubeMX
# The project should use "Basic" structure (NOT "Advanced")
# The project should "Copy only the necessary library files"
# Use any toolchain (apart from GPDSC as for now, because it doesn't include
# the startup_*.s file, even parsing GPDSC doesn't allow to find it, because
# we don't know where STM32CubeMX directory is located)

if(DEFINED CUBE_AS_STATIC_LIB AND CUBE_AS_STATIC_LIB)
    # this will create a static library from all the Cube sources
    add_library(cube STATIC "")
    set(CUBE_TARGET cube)
    message("Compiling STM32CubeMX sources as a static library: cube")
else()
    set(CUBE_TARGET "${CMAKE_PROJECT_NAME}")
    message("Adding STM32CubeMX sources to the executable: ${CMAKE_PROJECT_NAME}")
endif()

if(DEFINED CUBE_EXTERN_MAIN AND CUBE_EXTERN_MAIN)
    message("Adding extern_main() invocation to Cube generated main.c")
    execute_process(COMMAND
        sh "${CMAKE_CURRENT_SOURCE_DIR}/extern_main.sh"
        )
endif()

# helper functions
include(cube_utils.cmake)

# get info about the project
find_cube_root(CUBE_PROJECT_NAME CUBE_PROJECT_ROOT)
find_startup_file(STARTUP_FILE "${CUBE_PROJECT_NAME}" "${CUBE_PROJECT_ROOT}")

# add STM32Cube included directories
target_include_directories(${CUBE_TARGET}
    PUBLIC ${CUBE_PROJECT_ROOT}/Inc
    PUBLIC ${CUBE_PROJECT_ROOT}/Drivers/STM32F1xx_HAL_Driver/Inc
    PUBLIC ${CUBE_PROJECT_ROOT}/Drivers/STM32F1xx_HAL_Driver/Inc/Legacy
    PUBLIC ${CUBE_PROJECT_ROOT}/Drivers/CMSIS/Device/ST/STM32F1xx/Include
    PUBLIC ${CUBE_PROJECT_ROOT}/Drivers/CMSIS/Include
    )

# glob all the files regardless of how many were generated
file(GLOB_RECURSE CUBE_SOURCES
    "${CUBE_PROJECT_ROOT}/Inc/*.h"
    "${CUBE_PROJECT_ROOT}/Src/*.c"
    "${CUBE_PROJECT_ROOT}/Drivers/*.h"
    "${CUBE_PROJECT_ROOT}/Drivers/*.c"
    "${CUBE_PROJECT_ROOT}/Middlewares/*.h"
    "${CUBE_PROJECT_ROOT}/Middlewares/*.c"
    )

# remove any template files (if the toolchain left them)
list(FILTER CUBE_SOURCES EXCLUDE REGEX ".*/Templates/system_.*\.c")
string(REPLACE ";" "\n" MYVAR "${CUBE_SOURCES}")

# add sources
target_sources(${CUBE_TARGET}
    PRIVATE ${CUBE_SOURCES}
    PRIVATE ${STARTUP_FILE}
    )
